#include  "../header/halGPIO.h"     // private library - HAL layer


//--------------------------------------------------------------------
//             System Configuration  
//--------------------------------------------------------------------
void sysConfig(void){ 
	GPIOconfig();
	TIMERconfig();
	DMAconfig();
}

//---------------------------------------------------------------------
//            Polling based Delay function
//---------------------------------------------------------------------
void delay(unsigned int t){  // t[msec]
	volatile unsigned int i;

	for(i=t; i>0; i--);
}

//---------------------------------------------------------------------
//            Enter from LPM0 mode
//---------------------------------------------------------------------
void enterLPM(unsigned char LPM_level){
	if (LPM_level == 0x00)
	  _BIS_SR(LPM0_bits);     /* Enter Low Power Mode 0 */
        else if(LPM_level == 0x01)
	  _BIS_SR(LPM1_bits);     /* Enter Low Power Mode 1 */
        else if(LPM_level == 0x02)
	  _BIS_SR(LPM2_bits);     /* Enter Low Power Mode 2 */
	else if(LPM_level == 0x03)
	  _BIS_SR(LPM3_bits);     /* Enter Low Power Mode 3 */
        else if(LPM_level == 0x04)
	  _BIS_SR(LPM4_bits);     /* Enter Low Power Mode 4 */
}


void enableKeypad(void){
    KeysIRQIntIE   |= KEYPADIRQ;
}

char findKeyPressed(void){
    KeysPortOut = (KEYPADROW1 + KEYPADROW4 + KEYPADROW7);
    if ((KeysPortIn & KEYPADCOLA) == 0) return 16;
    else if ((KeysPortIn & KEYPADCOL3) == 0) return 15;
    else if ((KeysPortIn & KEYPADCOL2) == 0) return 14;
    else if ((KeysPortIn & KEYPADCOL1) == 0) return 13;

    KeysPortOut = (KEYPADROW1 + KEYPADROW4 + KEYPADROWF);
    if ((KeysPortIn & KEYPADCOLA) == 0) return 12;
    else if ((KeysPortIn & KEYPADCOL3) == 0) return 11;
    else if ((KeysPortIn & KEYPADCOL2) == 0) return 10;
    else if ((KeysPortIn & KEYPADCOL1) == 0) return 9;

    KeysPortOut = (KEYPADROW1 + KEYPADROW7 + KEYPADROWF);
    if ((KeysPortIn & KEYPADCOLA) == 0) return 8;
    else if ((KeysPortIn & KEYPADCOL3) == 0) return 7;
    else if ((KeysPortIn & KEYPADCOL2) == 0) return 6;
    else if ((KeysPortIn & KEYPADCOL1) == 0) return 5;

    KeysPortOut = (KEYPADROW4 + KEYPADROW7 + KEYPADROWF);
    if ((KeysPortIn & KEYPADCOLA) == 0) return 4;
    else if ((KeysPortIn & KEYPADCOL3) == 0) return 3;
    else if ((KeysPortIn & KEYPADCOL2) == 0) return 2;
    else if ((KeysPortIn & KEYPADCOL1) == 0) return 1;

    return 0;
}

extern void EnableInterrupsFromTimer(void){

}
extern void DisableInterrupsFromTimer(void){

}



extern void moveLCDRight(int howMuch){
    int i;
    for(i=0;i<howMuch;i++){
        lcd_cursor_right();
    }
}

extern void LCDSetCursor(int howMuch){
    lcd_home();
    moveLCDRight(howMuch);
}

extern void enableCaptureRegister(){
    TA1CCTL2 |= CCIE;
}

extern void setTimeTimer0(unsigned int t){
  TA0CCR0 = t;
}

void EnableTimerState3(void){
    TA1CTL |= MC_1 + TACLR;
    TA1CCTL1 = OUTMOD_7;
}
void DisableTimerState3(void){
    TA1CTL &= ~MC_3;
    TA1CCTL1 = OUTMOD_0;
}

void EnableADC(void){
    ADC10CTL0 |= ENC + ADC10SC;
}
void DisableADC(void){
    ADC10CTL0 &= ~ADC10ON;
}


unsigned int GetNadc(void){
    return ADC10MEM;
}

void InsertToRegistersForADC(unsigned int val){
    TA1CCR0 = val;
    TA1CCR1 = (int) val/2;
}

//---------------------------------------------------------------------
//            Enable interrupts
//---------------------------------------------------------------------
void enable_interrupts(){
  _BIS_SR(GIE);
}
//---------------------------------------------------------------------
//            Disable interrupts
//---------------------------------------------------------------------
void disable_interrupts(){
  _BIC_SR(GIE);
}

//*********************************************************************
//            Port1 Interrupt Service Rotine
//*********************************************************************
#pragma vector=PORT1_VECTOR
  __interrupt void PBs_handler(void){
   
	delay(debounceVal);
//---------------------------------------------------------------------
//            selector of transition between states
//---------------------------------------------------------------------
	if(PBsArrIntPend & PB0){
	  state = state1;
	  PBsArrIntPend &= ~PB0;
    }
    else if(PBsArrIntPend & PB1){
	  state = state2;
	  PBsArrIntPend &= ~PB1; 
    }
	else if(PBsArrIntPend & PB2){ 
	  state = state3;
	  PBsArrIntPend &= ~PB2;
    }
	//for real time
//    else if(PBsArrIntPend & PB3){
//      state = state4;
//      PBsArrIntPend &= ~PB3;
//    }
//---------------------------------------------------------------------
//            Exit from a given LPM 
//---------------------------------------------------------------------	
        switch(lpm_mode){
		case mode0:
		 LPM0_EXIT; // must be called from ISR only
		 break;
		 
		case mode1:
		 LPM1_EXIT; // must be called from ISR only
		 break;
		 
		case mode2:
		 LPM2_EXIT; // must be called from ISR only
		 break;
                 
                case mode3:
		 LPM3_EXIT; // must be called from ISR only
		 break;
                 
                case mode4:
		 LPM4_EXIT; // must be called from ISR only
		 break;
	}
        
}


  //*********************************************************************
  //            Port2 Interrupt Service Rotine
  //*********************************************************************
  #pragma vector=PORT2_VECTOR
    __interrupt void Keypad_handler(void){

      delay(debounceVal); //is it the same as PBs?

  //---------------------------------------------------------------------
  //            selector of transition between states
  //---------------------------------------------------------------------
      if(KeysIRQIntPend & KEYPADIRQ){
        char pressed = findKeyPressed();
        if (lastChosen == 0){
            currIndex = 0;
            lastChosen = pressed;
            lcd_putchar(KeyToChars[pressed][currIndex]);
            //startTimerFor1sec
        }
        else if (lastChosen != pressed){
            currIndex = 0;
            lastChosen = pressed;
            lcd_putchar(KeyToChars[pressed][currIndex]);
            //resetTimer
        }
        else if (lastChosen == pressed && howMuchCharsToKey[pressed] == currIndex){
            //disable Timer
            LPM0_EXIT;
        }
        else{ // (lastChosen == pressed && howMuchCharsToKey[pressed] > currIndex)
            currIndex++;
            //resetTimer
        }
        KeysPortOut &= ~KEYPADOUT;
        KeysIRQIntPend &= ~KEYPADIRQ;
      }
  }

  //******************************************************************
  // send a command to the LCD
  //******************************************************************
  void lcd_cmd(unsigned char c){

      LCD_WAIT; // may check LCD busy flag, or just delay a little, depending on lcd.h

      if (LCD_MODE == FOURBIT_MODE)
      {
          LCD_DATA_WRITE &= ~OUTPUT_DATA;// clear bits before new write
          LCD_DATA_WRITE |= ((c >> 4) & 0x0F) << LCD_DATA_OFFSET;
          lcd_strobe();
          LCD_DATA_WRITE &= ~OUTPUT_DATA;
          LCD_DATA_WRITE |= (c & (0x0F)) << LCD_DATA_OFFSET;
          lcd_strobe();
      }
      else
      {
          LCD_DATA_WRITE = c;
          lcd_strobe();
      }
  }
  //******************************************************************
  // send data to the LCD
  //******************************************************************
  void lcd_data(unsigned char c){

      LCD_WAIT; // may check LCD busy flag, or just delay a little, depending on lcd.h

      LCD_DATA_WRITE &= ~OUTPUT_DATA;
      LCD_RS(1);
      if (LCD_MODE == FOURBIT_MODE)
      {
          LCD_DATA_WRITE &= ~OUTPUT_DATA;
          LCD_DATA_WRITE |= ((c >> 4) & 0x0F) << LCD_DATA_OFFSET;
          lcd_strobe();
          LCD_DATA_WRITE &= (0xF0 << LCD_DATA_OFFSET) | (0xF0 >> 8 - LCD_DATA_OFFSET);
          LCD_DATA_WRITE &= ~OUTPUT_DATA;
          LCD_DATA_WRITE |= (c & 0x0F) << LCD_DATA_OFFSET;
          lcd_strobe();
      }
      else
      {
          LCD_DATA_WRITE = c;
          lcd_strobe();
      }

      LCD_RS(0);
  }
  //******************************************************************
  // write a string of chars to the LCD
  //******************************************************************
  void lcd_puts(const char * s){

      while(*s)
          lcd_data(*s++);
  }
  //******************************************************************
  // initialize the LCD
  //******************************************************************
  void lcd_init(){

      char init_value;

      if (LCD_MODE == FOURBIT_MODE) init_value = 0x3 << LCD_DATA_OFFSET;
          else init_value = 0x3F;

      LCD_RS_DIR(OUTPUT_PIN);
      LCD_EN_DIR(OUTPUT_PIN);
      LCD_RW_DIR(OUTPUT_PIN);
      LCD_DATA_DIR |= OUTPUT_DATA;
      LCD_RS(0);
      LCD_EN(0);
      LCD_RW(0);
      DelayMs(15);
      LCD_DATA_WRITE &= ~OUTPUT_DATA;
      LCD_DATA_WRITE |= init_value;
      lcd_strobe();
      DelayMs(5);
      LCD_DATA_WRITE &= ~OUTPUT_DATA;
      LCD_DATA_WRITE |= init_value;
      lcd_strobe();
      DelayUs(200);
      LCD_DATA_WRITE &= ~OUTPUT_DATA;
      LCD_DATA_WRITE |= init_value;
      lcd_strobe();

      if (LCD_MODE == FOURBIT_MODE){
          LCD_WAIT; // may check LCD busy flag, or just delay a little, depending on lcd.h
          LCD_DATA_WRITE &= ~OUTPUT_DATA;
          LCD_DATA_WRITE |= 0x2 << LCD_DATA_OFFSET; // Set 4-bit mode
          lcd_strobe();
          lcd_cmd(0x28); // Function Set
      }
          else lcd_cmd(0x3C); // 8bit,two lines,5x10 dots

      lcd_cmd(0xF); //Display On, Cursor On, Cursor Blink
      lcd_cmd(0x1); //Display Clear
      lcd_cmd(0x6); //Entry Mode
      lcd_cmd(0x80); //Initialize DDRAM address to zero
  }
  //******************************************************************
  // Delay usec functions
  //******************************************************************
  void DelayUs(unsigned int cnt){

      unsigned char i;
          for(i=cnt ; i>0 ; i--) asm(" nop"); // tha command asm("nop") takes raphly 1usec

  }
  //******************************************************************
  // Delay msec functions
  //******************************************************************
  void DelayMs(unsigned int cnt){

      unsigned char i;
          for(i=cnt ; i>0 ; i--) DelayUs(1000); // tha command asm("nop") takes raphly 1usec

  }
  //******************************************************************
  // lcd strobe functions
  //******************************************************************
  void lcd_strobe(){
    LCD_EN(1);
    asm(" nop");
    asm(" nop");
    LCD_EN(0);
  }
